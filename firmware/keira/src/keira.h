#pragma once
///////////////////////////////////////////////////////////////////////////////////////////////////////
//
//  Keira OS Header file
//
///////////////////////////////////////////////////////////////////////////////////////////////////////

// BUTTONS:  //////////////////////////////////////////////////////////////////////////////////////////
#define K_BTN_BACK         lilka::Button::B
#define K_BTN_EXIT         K_BTN_BACK

#define K_BTN_OK           lilka::Button::A
#define K_BTN_OPEN         K_BTN_OK

#define K_BTN_CONFIRM      lilka::Button::START

#define K_BTN_CONTEXT_MENU lilka::Button::D
///////////////////////////////////////////////////////////////////////////////////////////////////////
// GUIDELINE: Use Keira global button definitions(K_BTN_) for standard actions
///////////////////////////////////////////////////////////////////////////////////////////////////////

// APPS:  /////////////////////////////////////////////////////////////////////////////////////////////
#include "appmanager.h"
#include "apps/modplayer/modplayer.h"
#include "apps/liltracker/liltracker.h"
#include "apps/lua/luarunner.h"
#include "apps/mjs/mjsrunner.h"
#include "apps/nes/nesapp.h"
///////////////////////////////////////////////////////////////////////////////////////////////////////
// FILETYPE HANDLERS:  ////////////////////////////////////////////////////////////////////////////////
#define K_FT_NES_HANDLER(X)        AppManager::getInstance()->runApp(new NesApp(X))
#define K_FT_LUA_SCRIPT_HANDLER(X) AppManager::getInstance()->runApp(new LuaFileRunnerApp(X))
#define K_FT_JS_SCRIPT_HANDLER(X)  AppManager::getInstance()->runApp(new MJSApp(X))
#define K_FT_MOD_HANDLER(X)        AppManager::getInstance()->runApp(new ModPlayerApp(X))
#define K_FT_LT_HANDLER(X)         AppManager::getInstance()->runApp(new LilTrackerApp(X))
///////////////////////////////////////////////////////////////////////////////////////////////////////
// GUIDELINE: Use Keira global filetype handlers(K_FT_) if possible
///////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////////////////////////
//                                  UTILS:
///////////////////////////////////////////////////////////////////////////////////////////////////////
// BIT LOGIC:  ////////////////////////////////////////////////////////////////////////////////////////
#define GET_BIT(data, bit_no) ((data) >> (bit_no)) & 0b1
#define SET_BIT(data, bit_no, bit_value) \
    ((data) = ((bit_value) & 0b1) ? ((data) | (1 << (bit_no))) : ((data) & ~(1 << (bit_no))))
///////////////////////////////////////////////////////////////////////////////////////////////////////